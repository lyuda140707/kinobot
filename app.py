from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, Request, HTTPException
from aiogram import types
from bot import dp, bot
from google_api import get_gsheet_data
import os
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import asyncio

app = FastAPI()

- @app.get("/send-channel-post")
+ @app.post("/send-channel-post")
    token = os.getenv("BOT_TOKEN")
    channel_id = os.getenv("CHANNEL_ID")  # –∞–±–æ –Ω–∞–ø—Ä—è–º—É ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
    webapp_url = "https://lyuda140707.github.io/kinobot-webapp/"

    message_text = "üé¨ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫—ñ–Ω–æ-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫"

    payload = {
        "chat_id": channel_id,
        "text": message_text,
        "reply_markup": {
            "inline_keyboard": [[
                {"text": "üé¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", "web_app": {"url": webapp_url}}
            ]]
        }
    }

    response = requests.post(f"https://api.telegram.org/bot{token}/sendMessage", json=payload)
    
    if response.status_code == 200:
        return {"status": "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!"}
    else:
        return {"status": "‚ùå –ü–æ–º–∏–ª–∫–∞", "details": response.text}


@app.post("/request-film")
async def request_film(req: Request):
    data = await req.json()
    user_id = data.get('user_id')
    film_name = data.get('film_name')
    
    if user_id and film_name:
        message = f"üé¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º: {film_name}"
        requests.post(f"https://api.telegram.org/bot7749808687:AAGQ2TuCvI5T-HfRFP7GxWAsXsCi15Heqek/sendMessage", data={
            "chat_id": "7205633024",
            "text": message
        })
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        await bot.set_webhook(webhook_url)

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.post("/search-in-bot")
async def search_in_bot(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    query = data.get("query", "").lower()

    if not user_id or not query:
        return {"found": False}

    films = get_gsheet_data()

    found_film = None
    for film in films:
        if query in film.get("–ù–∞–∑–≤–∞", "").lower() and film.get("–ü–æ—Å–∏–ª–∞–Ω–Ω—è"):
            found_film = film
            break

    if found_film:
        return {"found": True, "videoUrl": found_film["–ü–æ—Å–∏–ª–∞–Ω–Ω—è"]}
    else:
        return {"found": False}

@app.post("/send-film")
async def send_film(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    film_name = data.get("film_name")

    if not user_id or not film_name:
        raise HTTPException(status_code=400, detail="user_id –∞–±–æ film_name –≤—ñ–¥—Å—É—Ç–Ω—ñ")

    films = get_gsheet_data()

    found_film = None
    for film in films:
        if film_name.lower() in film.get("–ù–∞–∑–≤–∞", "").lower() and film.get("file_id"):
            found_film = film
            break

    if not found_film:
        return {"success": False, "error": "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î file_id"}

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üé• –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ—ñ–ª—å–º üìö",
                web_app=WebAppInfo(url="https://lyuda140707.github.io/kinobot-webapp/")
            )]
        ]
    )

    sent_message = await bot.send_video(
        chat_id=user_id,
        video=found_film["file_id"],
        caption="üé¨ –ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É! üçø",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    # ‚úÖ –û–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å WebApp'—É
    asyncio.create_task(delete_after_timeout(user_id, sent_message.message_id))

    return {"success": True}


# –æ–∫—Ä–µ–º–æ –≤–∏–Ω–æ—Å–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
async def delete_after_timeout(chat_id, message_id):
    await asyncio.sleep(10800)  # 3 –≥–æ–¥–∏–Ω–∏ = 60*60*3 = 10800 —Å–µ–∫—É–Ω–¥
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤–∏–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@app.post("/check-subscription")
async def check_subscription(request: Request):
    data = await request.json()
    user_id = data.get('user_id')

    if not user_id:
        raise HTTPException(status_code=400, detail="user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    bot_token = os.getenv("BOT_TOKEN")  # –ë–µ—Ä–µ —Ç–æ–∫–µ–Ω –∑ .env
    channel_username = "@KinoTochkaUA"  # –¢–≤—ñ–π –∫–∞–Ω–∞–ª

    url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
    params = {
        "chat_id": channel_username,
        "user_id": user_id
    }
    response = requests.get(url, params=params)
    result = response.json()

    if result.get("ok") and result["result"]["status"] in ["member", "administrator", "creator"]:
        return {"subscribed": True}
    else:
        return {"subscribed": False}


# –î–æ–¥–∞—î–º–æ CORS –¥–ª—è –¥–æ—Å—Ç—É–ø—É WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –ê–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
