from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from aiogram import types
from bot import dp, bot
import os
import asyncio
import requests
import logging

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

app = FastAPI()

@app.post("/send-video")
async def send_video(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    file_id = data.get("file_id")

    if not user_id or not file_id:
        return {"success": False, "error": "user_id –∞–±–æ file_id –≤—ñ–¥—Å—É—Ç–Ω—ñ"}

    try:
        # –í—Ä—É—á–Ω—É –≤–∫–∞–∑—É—î–º–æ username –±–æ—Ç–∞
        bot_username = "UAKinoTochka_bot"  # –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π username

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ—ñ–ª—å–º
        message = await bot.send_video(
            chat_id=user_id,
            video=file_id,
            caption="üé¨ –ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É! üçø"
        )

        logging.info(f"–í—ñ–¥–µ–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –∑ file_id {file_id}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ Telegram –∑ WebApp
        back_to_video_webapp_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ—ñ–ª—å–º",  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                        url=f"t.me/{bot_username}?start={user_id}_{file_id}"  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ Telegram
                    )
                ]
            ]
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è WebApp –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ Telegram
        await bot.send_message(
            chat_id=user_id,
            text="‚ú® –§—ñ–ª—å–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞–º —É Telegram! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ—ñ–ª—å–º:",
            reply_markup=back_to_video_webapp_keyboard
        )

        return {"success": True}

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ: {str(e)}")
        return {"success": False, "error": str(e)}


@app.post("/search-in-bot")
async def search_in_bot(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    query = data.get("query", "").lower()

    if not user_id or not query:
        return {"found": False}

    films = get_gsheet_data()

    for film in films:
        if query in film.get("–ù–∞–∑–≤–∞", "").lower():
            video_url = film.get("–ü–æ—Å–∏–ª–∞–Ω–Ω—è")
            if video_url:
                return {"found": True, "videoUrl": video_url}
            else:
                return {"found": False}

    return {"found": False}

@app.post("/request-film")
async def request_film(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    film_name = data.get("film_name")

    if user_id and film_name:
        message = f"üé¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º: {film_name}"
        requests.post(
            f"https://api.telegram.org/bot{os.getenv('BOT_TOKEN')}/sendMessage",
            data={"chat_id": os.getenv("ADMIN_CHAT_ID"), "text": message}
        )

    return {"ok": True}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ webhook
        data = await request.json()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ webhook: {data}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –≤ –¥–∞–Ω–∏—Ö
        if not data.get("update_id") or not data.get("message"):
            logging.error("–ù–µ–º–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ")
            return {"success": False, "error": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö"}

        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        update = types.Update(**data)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ dispatcher –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        await dp.feed_update(bot, update)
        return {"ok": True}

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ webhook: {str(e)}")
        return {"success": False, "error": str(e)}

@app.on_event("startup")
async def startup():
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        await bot.set_webhook(webhook_url)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    uvicorn.run(app, host="0.0.0.0", port=10000)
