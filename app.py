from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, Request, HTTPException
from aiogram import types
from bot import dp, bot
from google_api import get_gsheet_data, get_google_service
import os
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import asyncio
from datetime import datetime, timedelta
import json
from pytz import timezone
from fastapi.responses import JSONResponse
import dateutil.parser
from pro_utils import add_pro_user, is_pro_active


# –°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∏–¥–∞–ª–∏—Ç–∏
messages_to_delete = []


from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ background_deleter –∑–∞–ø—É—â–µ–Ω–æ!")
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        await bot.set_webhook(webhook_url)

    asyncio.create_task(background_deleter())
    yield

# ‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è FastAPI –î–û –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
app = FastAPI(lifespan=lifespan)
@app.get("/")
async def root():
    return {"status": "ok"}





@app.post("/request-film")
async def request_film(req: Request):
    try:
        data = await req.json()
        user_id = data.get('user_id')
        film_name = data.get('film_name')

        if not user_id or not film_name:
            return JSONResponse(status_code=400, content={"success": False, "error": "user_id –∞–±–æ film_name –≤—ñ–¥—Å—É—Ç–Ω—ñ"})

        message = f"üé¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º: {film_name}"

        telegram_response = requests.post(
            f"https://api.telegram.org/bot{os.getenv('BOT_TOKEN')}/sendMessage",
            data={"chat_id": "7963871119", "text": message}
        )

        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if telegram_response.status_code != 200:
            return JSONResponse(status_code=500, content={"success": False, "error": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¥–æ Telegram"})

        return {"success": True}

    except Exception as e:
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})





@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.post("/search-in-bot")
async def search_in_bot(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    query = data.get("query", "").lower()

    if not user_id or not query:
        return {"found": False}

    films = get_gsheet_data()

    found_film = None
    for film in films:
        if query in film.get("–ù–∞–∑–≤–∞", "").lower() and film.get("–ü–æ—Å–∏–ª–∞–Ω–Ω—è"):
            found_film = film
            break

    if found_film:
        return {"found": True, "videoUrl": found_film["–ü–æ—Å–∏–ª–∞–Ω–Ω—è"]}
    else:
        return {"found": False}

from fastapi.responses import JSONResponse

@app.post("/send-film")
async def send_film(request: Request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        film_name = data.get("film_name")

        if not user_id or not film_name:
            return JSONResponse(status_code=400, content={"success": False, "error": "user_id –∞–±–æ film_name –≤—ñ–¥—Å—É—Ç–Ω—ñ"})

        films = get_gsheet_data()

        found_film = None
        for film in films:
            if film_name.lower() in film.get("–ù–∞–∑–≤–∞", "").lower() and film.get("file_id"):
                found_film = film
                break

        if not found_film:
            return JSONResponse(status_code=404, content={"success": False, "error": "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î file_id"})

        # –ì–æ—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üé• –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ—ñ–ª—å–º üìö",
                    web_app=WebAppInfo(url="https://lyuda140707.github.io/kinobot-webapp/")
                )]
            ]
        )

        # –ß–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        kyiv = timezone("Europe/Kyiv")
        delete_time = datetime.now(kyiv) + timedelta(hours=24)
        delete_time_str = delete_time.strftime('%H:%M %d.%m')

        caption = (
            "üé¨ –ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É! üçø\n\n"
            f"üïì –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –æ {delete_time_str} (–∑–∞ –ö–∏—î–≤–æ–º)."
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ
        sent_message = await bot.send_video(
            chat_id=user_id,
            video=found_film["file_id"],
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        service = get_google_service()
        sheet = service.spreadsheets()
        sheet.values().append(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="–í–∏–¥–∞–ª–µ–Ω–Ω—è!A2",
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": [[str(user_id), str(sent_message.message_id), delete_time.isoformat()]]}
            ).execute()

        print(f"‚úÖ –í—ñ–¥–µ–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

        return {"success": True}

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /send-film: {e}")
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})






@app.post("/check-subscription")
async def check_subscription(request: Request):
    data = await request.json()
    user_id = data.get('user_id')

    if not user_id:
        raise HTTPException(status_code=400, detail="user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    bot_token = os.getenv("BOT_TOKEN")

    channels = os.getenv("CHANNEL_LIST", "").split(",")  # ‚Üê —Ç—É—Ç –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –¥—Ä—É–≥–∏–π –∫–∞–Ω–∞–ª

    subscribed_to_any = False

    for channel_username in channels:
        url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
        params = {
            "chat_id": channel_username,
            "user_id": user_id
        }

        try:
            response = requests.get(url, params=params)
            result = response.json()
            if result.get("ok") and result["result"]["status"] in ["member", "administrator", "creator"]:
                subscribed_to_any = True
                break  # –º–æ–∂–Ω–∞ –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, –±–æ –≤–∂–µ —î –ø—ñ–¥–ø–∏—Å–∫–∞
        except Exception as e:
            print(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {e}")

    return {"subscribed": subscribed_to_any}


async def background_deleter():
    service = get_google_service()
    sheet = service.spreadsheets()

    while True:
        from pytz import utc
        now = datetime.now(utc)

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –∞—Ä–∫—É—à–∞ "–í–∏–¥–∞–ª–µ–Ω–Ω—è"
        data = sheet.values().get(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="–í–∏–¥–∞–ª–µ–Ω–Ω—è!A2:C1000"
        ).execute().get("values", [])

        print(f"‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {len(data)} –≤ —á–µ—Ä–∑—ñ")

        for i, row in enumerate(data):
            if len(row) < 3:
                continue

            user_id = row[0]
            message_id = row[1]
            delete_at_str = row[2]

            try:
                delete_at = dateutil.parser.isoparse(delete_at_str)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É: {delete_at_str} ‚Äî {e}")
                continue

            if now >= delete_at:
                try:
                    await bot.delete_message(chat_id=int(user_id), message_id=int(message_id))
                    print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} —É {user_id}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

                # –û—á–∏—Å—Ç–∏—Ç–∏ —Ä—è–¥–æ–∫
                row_number = i + 2
                sheet.values().update(
                    spreadsheetId=os.getenv("SHEET_ID"),
                    range=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è!A{row_number}:C{row_number}",
                    valueInputOption="RAW",
                    body={"values": [["", "", ""]]}
                ).execute()

        await asyncio.sleep(60)

@app.post("/check-pro")
async def check_pro(req: Request):
    data = await req.json()
    user_id = data.get("user_id")
    return {"isPro": is_pro_active(user_id)}

@app.post("/notify-payment")
async def notify_payment(req: Request):
    data = await req.json()
    user_id = data.get("user_id")
    add_pro_user(user_id)
    return {"status": "ok"}


@app.api_route("/ping", methods=["GET", "HEAD"])
async def ping():
    return {"status": "alive"}


# –î–æ–¥–∞—î–º–æ CORS –¥–ª—è –¥–æ—Å—Ç—É–ø—É WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –ê–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
