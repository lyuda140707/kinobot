from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, Request, HTTPException
from aiogram import types
from bot import dp, bot
from google_api import get_gsheet_data, get_google_service
import os
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import asyncio
from datetime import datetime, timedelta
import json
from pytz import timezone
from google_api import add_user_if_not_exists
from pydantic import BaseModel
from typing import Optional
from fastapi import Body
from pro_utils import has_active_pro
import logging
import sys
from json_log_formatter import JSONFormatter
from bot import safe_send_admin
import dateutil.parser
from fastapi import Request
from utils.date_utils import safe_parse_date
from contextlib import asynccontextmanager
from supabase_api import get_films

# singleton Google Sheets client
from google_api import get_google_service
SERVICE = get_google_service()
SHEETS = SERVICE.spreadsheets()

# ==== Supabase REST helper ====
SUPABASE_URL = os.getenv("SUPABASE_URL", "").rstrip("/")
SUPABASE_ANON_KEY = (
    os.getenv("SUPABASE_ANON_KEY")
    or os.getenv("SUPABASE_ANON")
    or ""
)

def _sb_headers():
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        raise RuntimeError("Supabase URL/KEY –Ω–µ –∑–∞–¥–∞–Ω—ñ –≤ ENV")
    return {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
    }


def sb_find_by_name_like(name: str):
    # –ü–æ—à—É–∫ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–æ—é –Ω–∞–∑–≤–æ—é
    import urllib.parse
    q = urllib.parse.quote(f"*{name}*")
    url = f"{SUPABASE_URL}/rest/v1/films?select=*&title=ilike.{q}&limit=50"
    r = requests.get(url, headers=_sb_headers(), timeout=10)
    r.raise_for_status()
    return r.json()

def sb_find_by_message_id(mid: str):
    import urllib.parse
    mid = urllib.parse.quote(mid)
    url = f"{SUPABASE_URL}/rest/v1/films?select=*&message_id=eq.{mid}&limit=1"
    r = requests.get(url, headers=_sb_headers(), timeout=10)
    r.raise_for_status()
    return r.json()

def sb_find_by_file_id(fid: str):
    import urllib.parse
    fid = urllib.parse.quote(fid)
    url = f"{SUPABASE_URL}/rest/v1/films?select=*&file_id=eq.{fid}&limit=1"
    r = requests.get(url, headers=_sb_headers(), timeout=10)
    r.raise_for_status()
    return r.json()


async def clean_old_requests_once():
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –≤–∏–¥–∞–ª—è—î –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 31 –¥–Ω—è –∑ –∞—Ä–∫—É—à–∞ '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è'."""
    from pytz import timezone
    from datetime import datetime, timedelta

    kyiv = timezone("Europe/Kyiv")
    sheet = SHEETS

    # 1) –ó–∞–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏
    rows = sheet.values().get(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A2:C1000"
    ).execute().get("values", [])

    now = datetime.now(kyiv)
    to_clear = []

    for idx, row in enumerate(rows, start=2):
        if len(row) < 3:
            continue
        ts_str = row[2]
        try:
            ts = kyiv.localize(datetime.strptime(ts_str, "%Y-%m-%d %H:%M:%S"))
        except:
            continue
        # —è–∫—â–æ —Å—Ç–∞—Ä—à–µ 31 –¥–Ω—è
        if now - ts > timedelta(days=31):
            to_clear.append(idx)

    # 2) –û—á–∏—â–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ä—è–¥–∫–∏
    for row_num in to_clear:
        sheet.values().update(
            spreadsheetId=os.getenv("SHEET_ID"),
            range=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A{row_num}:C{row_num}",
            valueInputOption="RAW",
            body={"values": [["", "", ""]]}
        ).execute()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî JSON-–ª–æ–≥–µ—Ä ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(JSONFormatter())

access_logger = logging.getLogger("uvicorn.access")
access_logger.setLevel(logging.INFO)
access_logger.addHandler(handler)

error_logger = logging.getLogger("uvicorn.error")
error_logger.setLevel(logging.INFO)
error_logger.addHandler(handler)
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî



class RateRequest(BaseModel):
    film_name: str
    action: str            # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "like" –∞–±–æ "dislike"
    undo: Optional[str] = None  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ, "like" –∞–±–æ "dislike" –∞–±–æ None

class SearchRequest(BaseModel):
    user_id: int
    query: str
    username: Optional[str] = None
    first_name: Optional[str] = None

class AdminMessage(BaseModel):
    user_id: int
    text: str



# –°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∏–¥–∞–ª–∏—Ç–∏
messages_to_delete = []


from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # üö´ –ù–ï —Å—Ç–∞–≤–∏–º–æ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ, —â–æ–± –Ω–µ –ø–∞–¥–∞–ª–æ
    from bot import clean_expired_pro
    await asyncio.to_thread(clean_expired_pro)
    yield


    

# ‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è FastAPI –î–û –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
app = FastAPI(lifespan=lifespan)


app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],      # ‚Üê –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ Origin –¥–ª—è –¥–µ–±–∞–≥—É
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
@app.get("/set-webhook")
async def set_webhook():
    webhook_url = os.getenv("WEBHOOK_URL")
    if not webhook_url:
        return {"error": "WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–æ"}
    try:
        await bot.set_webhook(webhook_url)
        return {"status": "ok", "url": webhook_url}
    except Exception as e:
        return {"error": str(e)}


BAD_BOTS = [
    "Googlebot", "Bingbot", "AhrefsBot", "YandexBot", "SEMRushBot",
    "DotBot", "MJ12bot", "facebookexternalhit", "Applebot", "DuckDuckBot"
]

@app.middleware("http")
async def block_bots(request: Request, call_next):
    user_agent = request.headers.get("User-Agent", "")
    if any(bot.lower() in user_agent.lower() for bot in BAD_BOTS):
        raise HTTPException(status_code=403, detail="Bots are not allowed")
    return await call_next(request)


# ‚úÖ –î–û–î–ê–ô –û–¶–ï –°–Æ–î–ò
@app.get("/")
async def root():
    return {"status": "alive"}

@app.post("/notify-payment")
async def notify_payment(req: Request):
    data = await req.json()
    user_id = data.get("user_id")
    username = data.get("username", "")
    first_name = data.get("first_name", "")

    if not user_id:
        raise HTTPException(status_code=400, detail="user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    service = get_google_service()
    sheet = service.spreadsheets()

    kyiv = timezone("Europe/Kyiv")
    now_kyiv = datetime.now(kyiv).strftime("%Y-%m-%d %H:%M:%S")

    sheet.values().append(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="PRO!A2:D2",
        valueInputOption="USER_ENTERED",
        body={"values": [[str(user_id), username, "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", now_kyiv]]}
    ).execute()
    
    admin_id = os.getenv("ADMIN_ID")
    await safe_send_admin(
        bot, admin_id,
        f"üí≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{first_name}](tg://user?id={user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–Ø –æ–ø–ª–∞—Ç–∏–≤'\n\n‚úÖ –©–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ PRO, –Ω–∞–¥—ñ—à–ª–∏:\n`/ok {user_id}`",
        parse_mode="Markdown"
    )

    return {"ok": True}

from uuid import uuid4

@app.post("/create-payment")
async def create_payment(req: Request):
    data = await req.json()
    user_id = data.get("user_id")
    username = data.get("username", "")
    first_name = data.get("first_name", "")
    plan = data.get("plan", "pro30")

    if not user_id:
        raise HTTPException(status_code=400, detail="user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    invoice_id = str(uuid4())  # –≥–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∑–∞—è–≤–∫–∏
    kyiv = timezone("Europe/Kyiv")
    now_kyiv = datetime.now(kyiv).strftime("%Y-%m-%d %H:%M:%S")

    # üîπ –ó–∞–ø–∏—Å—É—î–º–æ —É Google –¢–∞–±–ª–∏—Ü—é (–¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó)
    sheet = get_google_service().spreadsheets()
    sheet.values().append(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="PRO!A2:E2",
        valueInputOption="USER_ENTERED",
        body={"values": [[str(user_id), username, f"–°—Ç–≤–æ—Ä–∏–≤ –æ–ø–ª–∞—Ç—É ({plan})", now_kyiv, invoice_id]]}
    ).execute()

    # üîπ –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É
    admin_id = os.getenv("ADMIN_ID")
    await safe_send_admin(
        bot, admin_id,
        f"üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{first_name}](tg://user?id={user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–û—Ç—Ä–∏–º–∞—Ç–∏ PRO'\n"
        f"üìå –ü–ª–∞–Ω: {plan}\nüÜî invoice: {invoice_id}",
        parse_mode="Markdown"
    )

    return {"ok": True, "invoice_id": invoice_id}

@app.post('/contact-admin')
async def contact_admin(msg: AdminMessage):
    admin_id = int(os.getenv("ADMIN_ID", "7963871119"))
    reply_cmd = f"/reply {msg.user_id} "
    text = (
        f"‚úâÔ∏è –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {msg.user_id}:\n\n"
        f"{msg.text}\n\n"
        f"–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: <code>{reply_cmd}–≤–∞—à_—Ç–µ–∫—Å—Ç</code>"
    )

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è /reply
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", switch_inline_query=reply_cmd)]
        ]
    )
    await safe_send_admin(bot, admin_id, text, parse_mode="HTML", reply_markup=keyboard)
    return {'ok': True}



@app.post("/request-film")
async def request_film(req: Request):
    try:
        data = await req.json()
        user_id = str(data.get('user_id'))
        film_name = data.get('film_name')

        if not user_id or not film_name:
            return JSONResponse(status_code=400, content={"success": False, "error": "user_id –∞–±–æ film_name –≤—ñ–¥—Å—É—Ç–Ω—ñ"})

        is_pro = has_active_pro(user_id)
        remaining = None

        # üîí –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î PRO ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
        if not is_pro:
            service = get_google_service()
            sheet = service.spreadsheets()

            kyiv = timezone("Europe/Kyiv")
            now = datetime.now(kyiv)
            one_month_ago = now - timedelta(days=30)

            result = sheet.values().get(
                spreadsheetId=os.getenv("SHEET_ID"),
                range="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A2:C1000"
            ).execute().get("values", [])

            user_requests = []
            for row in result:
                if len(row) < 3 or row[0] != user_id:
                    continue
                try:
                    row_time = timezone("Europe/Kyiv").localize(datetime.strptime(row[2], "%Y-%m-%d %H:%M:%S"))
                    if row_time >= one_month_ago:
                        user_requests.append(row)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É –¥–∞—Ç–∏: {e}")
                    continue

            max_free_requests = 5
            remaining = max_free_requests - len(user_requests)

            if remaining <= 0:
                print(f"‚õî {user_id} –ø–µ—Ä–µ–≤–∏—â–∏–≤ –ª—ñ–º—ñ—Ç. –ó–∞–ø–∏—Ç—ñ–≤: {len(user_requests)}")
                return JSONResponse(status_code=403, content={
                    "success": False,
                    "error": (
                        "‚õî –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ 5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è.\n\n"
                        "üöÄ –û—Ç—Ä–∏–º–∞–π—Ç–µ PRO ‚Äî —ñ –∑–∞–º–æ–≤–ª—è–π—Ç–µ —Å–∫—ñ–ª—å–∫–∏ –∑–∞–≤–≥–æ–¥–Ω–æ!"
                    ),
                    "remaining_requests": 0,
                    "is_pro": is_pro
                })
            else:
                print(f"‚úÖ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —â–µ {remaining} –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")

        # ‚úÖ –ó–∞–ø–∏—Å—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        service = get_google_service()
        sheet = service.spreadsheets()
        now_str = datetime.now(timezone("Europe/Kyiv")).strftime("%Y-%m-%d %H:%M:%S")

        sheet.values().append(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A2:C2",
            valueInputOption="USER_ENTERED",
            body={"values": [[user_id, film_name, now_str]]}
        ).execute()

        # üì® –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        message = f"üé¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º: {film_name}"
        await safe_send_admin(
            bot, int(os.getenv("ADMIN_ID", "7963871119")), message, parse_mode=None
        )
        
        return {
            "success": True,
            "remaining_requests": remaining if remaining is not None else "‚àû",
            "is_pro": is_pro
        }

    except Exception as e:
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

from bot import bot, MEDIA_CHANNEL_ID
from fastapi.responses import JSONResponse

@app.post("/search-in-bot")
async def search_in_bot(data: SearchRequest):
    user_id = data.user_id
    query   = data.query.lower().strip()
    username  = data.username or ""
    first_name = data.first_name or ""

    if user_id:
        add_user_if_not_exists(user_id, username, first_name)

    if not user_id or not query:
        return {"found": False}

    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—è–¥–æ–∫, –¥–µ —î message_id
    rows = sb_find_by_name_like(query)
    found = next((f for f in rows if f.get("message_id")), None)

    if not found:
        return {"found": False}

    # –∫–æ–ø—ñ—é—î–º–æ —Ü–µ –≤—ñ–¥–µ–æ –∑ –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –≤ —á–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await bot.copy_message(
            chat_id=int(user_id),
            from_chat_id=MEDIA_CHANNEL_ID,
            message_id=int(found["message_id"]),
        )
    except Exception as e:
        # —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
        return JSONResponse(status_code=500, content={"found": True, "error": str(e)})

    # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –ª–∏—à–µ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —É—Å–ø—ñ—Ö—É
    return {"found": True, "sent": True}

from fastapi.responses import JSONResponse

@app.post("/send-film")
async def send_film(request: Request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        film_name = data.get("film_name")

        username = data.get("username", "")
        first_name = data.get("first_name", "")

        if user_id:
            add_user_if_not_exists(user_id, username, first_name)



        if not user_id or not film_name:
            return JSONResponse(status_code=400, content={"success": False, "error": "user_id –∞–±–æ film_name –≤—ñ–¥—Å—É—Ç–Ω—ñ"})

        rows = sb_find_by_name_like(film_name)
        found_film = next((f for f in rows if f.get("message_id")), None)

        if not found_film:
            return JSONResponse(status_code=404, content={"success": False, "error": "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î file_id"})

                # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É PRO
        if found_film.get("–î–æ—Å—Ç—É–ø") == "PRO" and not has_active_pro(str(user_id)):
            return JSONResponse(status_code=403, content={"success": False, "error": "‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è PRO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"})


        # –ì–æ—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üé• –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ—ñ–ª—å–º üìö",
                    web_app=WebAppInfo(url="https://relaxbox.site/")
                )]
            ]
        )

        # –ß–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        kyiv = timezone("Europe/Kyiv")
        delete_time = datetime.now(kyiv) + timedelta(hours=24)
        delete_time_str = delete_time.strftime('%H:%M %d.%m')

        caption = (
            "üé¨ –ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É! üçø\n\n"
            f"üïì –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –æ {delete_time_str} (–∑–∞ –ö–∏—î–≤–æ–º)."
        )

        message_id = int(found_film.get("message_id") or found_film.get("file_id"))
        sent_message = await bot.copy_message(
            chat_id=int(user_id),
            from_chat_id=MEDIA_CHANNEL_ID,
            message_id=message_id
        )
        try:
            await bot.edit_message_caption(
                chat_id=int(user_id),
                message_id=sent_message.message_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ caption: {e}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        service = get_google_service()
        sheet = service.spreadsheets()
        sheet.values().append(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="–í–∏–¥–∞–ª–µ–Ω–Ω—è!A2",
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": [[str(user_id), str(sent_message.message_id), delete_time.isoformat()]]}
            ).execute()

        print(f"‚úÖ –í—ñ–¥–µ–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

        return {"success": True}

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /send-film: {e}")
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})


@app.post("/send-film-id")
async def send_film_by_id(request: Request):
    data = await request.json()
    user_id = str(data.get("user_id"))
    message_id = str(data.get("message_id", "")).strip()

    if not user_id or not message_id:
        return {"success": False, "error": "user_id –∞–±–æ message_id –≤—ñ–¥—Å—É—Ç–Ω—ñ"}

    print(f"üìΩÔ∏è /send-film-id {message_id} –≤—ñ–¥ {user_id}")

    # 1) –®—É–∫–∞—î–º–æ –≤ Supabase: —Å–ø–æ—á–∞—Ç–∫—É –∑–∞ message_id, –ø–æ—Ç—ñ–º –∑–∞ file_id
    try:
        row = None
        rows = sb_find_by_message_id(message_id)
        if rows:
            row = rows[0]
        else:
            rows = sb_find_by_file_id(message_id)
            if rows:
                row = rows[0]
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase:", e)
        return {"success": False, "error": "–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏"}

    if not row:
        return {"success": False, "error": "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

    # 2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PRO (—É Supabase –ø–æ–ª–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è 'access')
    if (row.get("access") == "PRO") and (not has_active_pro(user_id)):
        return {"success": False, "error": "‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è PRO –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"}

    # 3) –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å
    title = row.get("title") or ""
    description = row.get("description") or ""
    caption = f"üé¨ {title}\n\n{description}".strip()

    # 4) –Ø–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–ø—ñ—é–≤–∞—Ç–∏
    original_message_id = row.get("message_id") or row.get("file_id")
    if not original_message_id:
        return {"success": False, "error": "–ù–µ–º–∞—î message_id/file_id —É –∑–∞–ø–∏—Å—ñ"}

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üé• –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ—ñ–ª—å–º üìö",
                web_app=WebAppInfo(url="https://relaxbox.site/")
            )
        ]]
    )

    try:
        message_id = int(row.get("message_id") or row.get("file_id"))
        sent_message = await bot.copy_message(
            chat_id=int(user_id),
            from_chat_id=MEDIA_CHANNEL_ID,
            message_id=message_id
        )
        try:
            await bot.edit_message_caption(
                chat_id=int(user_id),
                message_id=sent_message.message_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ caption: {e}")

    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")
        return {"success": False, "error": str(e)}

    # 5) –ü–ª–∞–Ω—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ Google Sheet '–í–∏–¥–∞–ª–µ–Ω–Ω—è' —è–∫ –±—É–ª–æ)
    try:
        kyiv = timezone("Europe/Kyiv")
        delete_time = datetime.now(kyiv) + timedelta(hours=24)
        sheet = get_google_service().spreadsheets()
        sheet.values().append(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="–í–∏–¥–∞–ª–µ–Ω–Ω—è!A2",
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body={"values": [[str(user_id), str(sent_message.message_id), delete_time.isoformat()]]}
        ).execute()
    except Exception as e:
        # —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–Ω–µ–º–æ
        print("‚ö†Ô∏è –ù–µ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ '–í–∏–¥–∞–ª–µ–Ω–Ω—è':", e)

    return {"success": True}




@app.post("/check-subscription")
async def check_subscription(request: Request):
    data = await request.json()
    user_id = data.get('user_id')

    if not user_id:
        raise HTTPException(status_code=400, detail="user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

    bot_token = os.getenv("BOT_TOKEN")

    channels = os.getenv("CHANNEL_LIST", "").split(",")  # ‚Üê —Ç—É—Ç –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –¥—Ä—É–≥–∏–π –∫–∞–Ω–∞–ª

    subscribed_to_any = False

    for channel_username in channels:
        url = f"https://api.telegram.org/bot{bot_token}/getChatMember"
        params = {
            "chat_id": channel_username,
            "user_id": user_id
        }

        try:
            response = requests.get(url, params=params)
            result = response.json()
            if result.get("ok") and result["result"]["status"] in ["member", "administrator", "creator"]:
                subscribed_to_any = True
                break  # –º–æ–∂–Ω–∞ –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, –±–æ –≤–∂–µ —î –ø—ñ–¥–ø–∏—Å–∫–∞
        except Exception as e:
            print(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {e}")

    return {"subscribed": subscribed_to_any}


async def background_deleter():
    service = get_google_service()
    sheet = service.spreadsheets()

    while True:
        from pytz import utc
        now = datetime.now(utc)

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –∞—Ä–∫—É—à–∞ "–í–∏–¥–∞–ª–µ–Ω–Ω—è"
        data = sheet.values().get(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="–í–∏–¥–∞–ª–µ–Ω–Ω—è!A2:C1000"
        ).execute().get("values", [])

        print(f"üîç –í–º—ñ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ –í–∏–¥–∞–ª–µ–Ω–Ω—è:\n{data}")

        print(f"‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {len(data)} –≤ —á–µ—Ä–∑—ñ")

        for i, row in enumerate(data):
            if len(row) < 3:
                continue

            user_id = row[0]
            message_id = row[1]
            delete_at_str = row[2]

            if not user_id.isdigit() or not message_id.isdigit():
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—è–¥–æ–∫: {row}")
                continue

            try:
                delete_at = dateutil.parser.isoparse(delete_at_str)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É: {delete_at_str} ‚Äî {e}")
                continue

            if now >= delete_at:
                try:
                    await bot.delete_message(chat_id=int(user_id), message_id=int(message_id))
                    print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} —É {user_id}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

                # –û—á–∏—Å—Ç–∏—Ç–∏ —Ä—è–¥–æ–∫
                row_number = i + 2
                sheet.values().update(
                    spreadsheetId=os.getenv("SHEET_ID"),
                    range=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è!A{row_number}:C{row_number}",
                    valueInputOption="RAW",
                    body={"values": [["", "", ""]]}
                ).execute()
                    

        
async def background_deleter_once():
    from pytz import utc
    now = datetime.now(utc)
    sheet = SHEETS

    rows = sheet.values().get(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="–í–∏–¥–∞–ª–µ–Ω–Ω—è!A2:C1000"
    ).execute().get("values", [])

    for idx, row in enumerate(rows, start=2):
        if len(row) < 3:
            continue
        user_id, message_id, delete_at_str = row
        if not (user_id.isdigit() and message_id.isdigit()):
            continue
        try:
            delete_at = dateutil.parser.isoparse(delete_at_str)
        except:
            continue

        if datetime.now(utc) >= delete_at:
            try:
                await bot.delete_message(chat_id=int(user_id), message_id=int(message_id))
            except:
                pass
            sheet.values().update(
                spreadsheetId=os.getenv("SHEET_ID"),
                range=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è!A{idx}:C{idx}",
                valueInputOption="RAW",
                body={"values":[["","",""]]}
            ).execute()

# ‚Ä¶ –≤–∞—à background_deleter_once —Ç—É—Ç ‚Ä¶

async def check_pending_payments_once():
    """
    –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î PRO!A2:D —ñ –æ–±—Ä–æ–±–ª—è—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏
    ‚Äú–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è‚Äù —Å—Ç–∞—Ä—à—ñ –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω.
    """
    service = get_google_service()
    sheet = service.spreadsheets()
    kyiv = timezone("Europe/Kyiv")
    now = datetime.now(kyiv)

    # 1) –ó—á–∏—Ç—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏
    rows = sheet.values().get(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="PRO!A2:D1000"
    ).execute().get("values", [])
    for idx, row in enumerate(rows, start=2):
        if len(row) < 4:
            continue
        user_id, username, status, created_at_str = row[:4]
        if status != "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
            continue

        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É —ñ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ
        try:
            created_at = datetime.strptime(created_at_str, "%Y-%m-%d %H:%M:%S")
            # –ª–æ–∫–∞–ª—ñ–∑—É—î–º–æ –ø—ñ–¥ –ö–∏—ó–≤
            created_at = kyiv.localize(created_at)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∞—Ç—É '{created_at_str}': {e}")
            continue

        if now - created_at > timedelta(minutes=10):
            # 2) –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            from bot import safe_send
            await safe_send(
                bot, int(user_id),
                "‚ùóÔ∏è –ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∑–∞ PRO-–¥–æ—Å—Ç—É–ø.\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üöÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É¬ª –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üöÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É",
                            web_app=WebAppInfo(url="https://relaxbox.site/")
                        )
                    ]]
                )
            )
            print(f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–æ {user_id}, —Ç–µ—Ä–º—ñ–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤")

            # 3) –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É Google Sheets
            print(f"üîß –ì–æ—Ç—É—î–º–æ update PRO!A{idx}:C{idx} ‚Üí ['{user_id}', '{username}', '–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ']")
            sheet.values().update(
                spreadsheetId=os.getenv("SHEET_ID"),
                range=f"PRO!A{idx}:C{idx}",
                valueInputOption="RAW",
                body={"values": [[user_id, username, "–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"]]}
            ).execute()
            print(f"üîß –°—Ç–∞—Ç—É—Å —É PRO!A{idx}:C{idx} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'")
            print(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ update PRO!A{idx}:C{idx}")


@app.post("/jobs/check-payments")
async def job_check_payments():
    """
    HTTP-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ PRO-–ø–ª–∞—Ç–µ–∂—ñ–≤ —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 10 —Ö–≤.
    –í–∏–∫–ª–∏–∫–∞–π—Ç–µ —á–µ—Ä–µ–∑ GitHub Actions cron.
    """
    await check_pending_payments_once()
    return {"ok": True, "checked": "pending payments processed"}


async def check_pending_payments():
    service = get_google_service()
    sheet = service.spreadsheets()

    kyiv = timezone("Europe/Kyiv")

    while True:
        print("üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—á—ñ–∫—É—é—á–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤...")  
        now = datetime.now(kyiv).replace(tzinfo=None)  # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
        print(f"üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {now}")

        data = sheet.values().get(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="PRO!A2:D1000"
        ).execute().get("values", [])

        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {len(data)}")

        for i, row in enumerate(data):
            if len(row) < 4:
                continue

            user_id = row[0]
            username = row[1] if len(row) > 1 else ""
            status = row[2]
            created_at_str = row[3]

            if status != "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è":
                continue

            try:
                created_at = datetime.strptime(created_at_str, "%Y-%m-%d %H:%M:%S")
                print(f"‚è∞ –ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ: {created_at}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ '{created_at_str}': {e}")
                continue

            diff = now - created_at
            print(f"‚è≥ –ü—Ä–æ–π—à–ª–æ —á–∞—Å—É: {diff}")

            if diff > timedelta(minutes=10):
                from bot import safe_send

                print(f"‚ö†Ô∏è –¢–µ—Ä–º—ñ–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

                try:
                    await safe_send(
                        bot, int(user_id),
                        "‚ùóÔ∏è –ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∑–∞ PRO –¥–æ—Å—Ç—É–ø.\n\n"
                        "–ú–æ–∂–ª–∏–≤–æ, –≤–∏ –∑–∞–±—É–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∞–±–æ –æ–ø–ª–∞—Ç–∞ —â–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.\n"
                        "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[[
                                InlineKeyboardButton(
                                    text="üöÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É",
                                    web_app=WebAppInfo(url="https://relaxbox.site/")
                                )
                            ]]
                        )
                    )
                    print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")

                row_number = i + 2
                sheet.values().update(
                    spreadsheetId=os.getenv("SHEET_ID"),
                    range=f"PRO!A{row_number}:C{row_number}",
                    valueInputOption="RAW",
                    body={"values": [[user_id, username, "–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"]]}
                ).execute()

                print(f"üîß –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' —É Google –¢–∞–±–ª–∏—Ü—ñ")

        await asyncio.sleep(60)



from fastapi.responses import JSONResponse

@app.post("/check-pro")
async def check_pro(req: Request):
    data = await req.json()
    user_id = str(data.get("user_id"))
    if not user_id:
        return JSONResponse(status_code=400, content={"error": "user_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"})

    service = get_google_service()
    sheet = service.spreadsheets()
    res = sheet.values().get(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="PRO!A2:D1000"
    ).execute()
    rows = res.get("values", [])

    kyiv = timezone("Europe/Kyiv")
    today = datetime.now(kyiv).date()

    # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º, —â–æ–± –º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π row_number
    for idx, row in enumerate(rows, start=2):
        if len(row) < 4:
            continue
        uid, _, status, exp_str = row[:4]
        if uid.strip() == user_id and status.strip().lower() == "–∞–∫—Ç–∏–≤–Ω–æ":
            # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É
            expire_dt = safe_parse_date(exp_str)
            exp_date = expire_dt.date() if isinstance(expire_dt, datetime) else expire_dt

            if exp_date >= today:
                # PRO –¥—ñ–π—Å–Ω–∏–π ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞—Ç—É
                return {"isPro": True, "expire_date": exp_str.strip()}

            # –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É —Ç–∞–±–ª–∏—Ü—ñ
            sheet.values().update(
                spreadsheetId=os.getenv("SHEET_ID"),
                range=f"PRO!C{idx}",
                valueInputOption="RAW",
                body={"values": [["–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"]]}
            ).execute()
            break  # –¥–∞–ª—ñ –Ω–µ —à—É–∫–∞—î–º–æ

    return {"isPro": False, "expire_date": None}




@app.post("/clean-pro")
async def clean_pro_endpoint():
    from bot import clean_expired_pro
    try:
        clean_expired_pro()
        return {"success": True, "message": "–ß–∏—Å—Ç–∫–∞ PRO –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.api_route("/ping", methods=["GET", "HEAD"])
async def ping():
    return {"status": "alive"}

@app.post("/jobs/clean-requests")
async def job_clean_requests():
    """
    HTTP-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.
    –í–∏–∫–ª–∏–∫–∞–π—Ç–µ –π–æ–≥–æ CURL-–æ–º –∞–±–æ –∑ GitHub Actions cron.
    """
    await clean_old_requests_once()
    return {"ok": True, "cleared": "old orders cleaned"}

@app.post("/jobs/delete-old-messages")
async def job_delete_old_messages():
    """
    –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –≤–∏–¥–∞–ª—è—î –≤—Å—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –≤—ñ–¥–µ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –¥–∞–Ω–∏–º–∏ –∑ –∞—Ä–∫—É—à–∞ '–í–∏–¥–∞–ª–µ–Ω–Ω—è'.
    """
    await background_deleter_once()
    return {"ok": True, "deleted": "old messages removed"}


@app.post("/reactivate-user")
async def reactivate_user(req: Request):
    data = await req.json()
    user_id = str(data.get("user_id"))

    print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω–∏–π")
    return {"ok": True}
    



@app.post("/rate")
async def rate_film(data: RateRequest):
    try:
        print("üîî /rate –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:", data.dict())

        film_name = data.film_name
        action = data.action
        undo_action = data.undo

        SPREADSHEET_ID = os.getenv("SHEET_ID")
        if not SPREADSHEET_ID:
            return JSONResponse(status_code=500, content={"success": False, "error": "SHEET_ID –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"})

        service = get_google_service()
        sheet = service.spreadsheets()
        values = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="Sheet1!A2:Z1000"
        ).execute().get("values", [])

        col_idx = 12 if action == "like" else 13
        undo_col_idx = 12 if undo_action == "like" else 13 if undo_action == "dislike" else None

        updates = []

        found = False
        for idx, row in enumerate(values, start=2):
            if len(row) == 0 or row[0].strip().lower() != film_name.strip().lower():
                continue

            found = True
            while len(row) <= max(col_idx, undo_col_idx if undo_col_idx is not None else 0):
                row.append("0")

            current = int(row[col_idx]) if row[col_idx].isdigit() else 0
            current += 1

            updates.append({
                "range": f"Sheet1!{chr(65+col_idx)}{idx}",
                "values": [[str(current)]]
            })

            if undo_col_idx is not None:
                undo_val = int(row[undo_col_idx]) if row[undo_col_idx].isdigit() else 0
                undo_val = max(0, undo_val - 1)
                updates.append({
                    "range": f"Sheet1!{chr(65+undo_col_idx)}{idx}",
                    "values": [[str(undo_val)]]
                })

        if not found:
            print("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ç–∞–±–ª–∏—Ü—ñ")
            return JSONResponse(status_code=404, content={"success": False, "error": "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"})

        # ‚úÖ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
        print("üîÉ –û–Ω–æ–≤–ª–µ–Ω–Ω—è Google Sheet:", updates)
        sheet.values().batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={
                "valueInputOption": "USER_ENTERED",
                "data": updates
            }
        ).execute()

        return {"success": True}

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /rate: {e}")
        return JSONResponse(status_code=500, content={"success": False, "error": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})

from pytz import timezone
from datetime import datetime
import asyncio
import os
from google_api import get_google_service
from bot import bot
# ‚îÄ‚îÄ ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –∑ —Ñ—ñ–ª—å–º–∞–º–∏
MEDIA_CHANNEL_ID = int(os.getenv("MEDIA_CHANNEL_ID"))


async def notify_pro_expiring():
    service = get_google_service()
    sheet = service.spreadsheets()
    kyiv = timezone("Europe/Kyiv")

    while True:
        print("üîî –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PRO, –∫–æ–º—É —Ç—Ä–µ–±–∞ –Ω–∞–≥–∞–¥–∞—Ç–∏...")

        data = sheet.values().get(
            spreadsheetId=os.getenv("SHEET_ID"),
            range="PRO!A2:E1000"
        ).execute().get("values", [])

        now = datetime.now(kyiv)

        for i, row in enumerate(data):
            if len(row) < 4:
                continue

            user_id, username, status, expire_str = row[:4]
            notified = row[4] if len(row) > 4 else ""
            if status != "–ê–∫—Ç–∏–≤–Ω–æ":
                continue
            try:
                # –†–æ–∑–±–∏—Ä–∞—î–º–æ –±—É–¥—å-—è–∫—É ISO-–¥–∞—Ç—É –∑ —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º –∞–±–æ –±–µ–∑
                expire_date = dateutil.parser.isoparse(expire_str)
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å
                if expire_date.tzinfo is None:
                    expire_date = kyiv.localize(expire_date)
                else:
                    expire_date = expire_date.astimezone(kyiv)
                # –Ø–∫—â–æ –±—É–ª–∞ –ª–∏—à–µ –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å—É ‚Äî –≤—Å—Ç–∞—î–º–æ –Ω–∞ 23:59:00
                if len(expire_str.strip()) == 10:
                    expire_date = expire_date.replace(hour=23, minute=59, second=0)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ {expire_str}: {e}")
                continue
          
                    

            hours_left = (expire_date - now).total_seconds() / 3600

            if 0 < hours_left <= 48 and notified != "yes":
                try:
                    await bot.send_message(
                        int(user_id),
                        f"‚ö°Ô∏è –í–∞—à PRO-–¥–æ—Å—Ç—É–ø –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è {expire_date.strftime('%d.%m.%Y %H:%M')}!\n\n"
                        "üîÑ –ü—Ä–æ–¥–æ–≤–∂—ñ—Ç—å PRO, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—ñ–ª—å–º—ñ–≤!"
                    )
                    row_number = i + 2
                    sheet.values().update(
                        spreadsheetId=os.getenv("SHEET_ID"),
                        range=f"PRO!E{row_number}",
                        valueInputOption="RAW",
                        body={"values": [["yes"]]}
                    ).execute()
                    print(f"‚úÖ –û–ø–æ–≤—ñ—Å—Ç–∏–ª–∏ {user_id}")
                except Exception as e:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {user_id}: {e}")

        await asyncio.sleep(60 * 60 * 2)  # —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏
