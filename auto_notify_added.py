import asyncio
import os
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from dotenv import load_dotenv
from datetime import datetime, timedelta

from google_api import get_google_service  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SHEET_ID")

# ---- ‚öôÔ∏è –Ñ–î–ò–ù–ò–ô –∫–ª—ñ—î–Ω—Ç Google Sheets –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å ----
SERVICE = get_google_service()
SHEETS = SERVICE.spreadsheets()

# ---- ü§ñ –Ñ–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ ----
bot = Bot(token=BOT_TOKEN)

# ---- –ó–∞–≥–æ—Ç–æ–≤–∞–Ω–∏–π —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏–π —à–∞–±–ª–æ–Ω (—â–æ–± –Ω–µ –±—É–¥—É–≤–∞—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É) ----
DONATE_KB = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚òï –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ RelaxTime", url="https://send.monobank.ua/jar/9wTjSL3xu2")],
    [InlineKeyboardButton(text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è", switch_inline_query="–î–∏–≤–∏—Å—å —Ñ—ñ–ª—å–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é ‚Äî @Relax_TimeBot")],
])

# ================== Google Sheets helpers ==================
def is_user_blocked(user_id: int) -> bool:
    resp = SHEETS.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2:A1000"
    ).execute()
    for row in resp.get("values", []):
        if row and str(row[0]) == str(user_id):
            return True
    return False

def add_blocked_user(user_id: int):
    SHEETS.values().append(
        spreadsheetId=SPREADSHEET_ID,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2",
        valueInputOption="USER_ENTERED",
        insertDataOption="INSERT_ROWS",
        body={"values": [[str(user_id)]]}
    ).execute()

def remove_user_from_blocklist(user_id: int):
    resp = SHEETS.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2:A1000"
    ).execute()
    new_values = [row for row in resp.get("values", []) if row and str(row[0]) != str(user_id)]
    # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
    SHEETS.values().update(
        spreadsheetId=SPREADSHEET_ID,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2:A1000",
        valueInputOption="RAW",
        body={"values": new_values or [[""]]}  # –Ω–µ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ—Ä–æ–∂–Ω—ñ–º
    ).execute()

# ================== Telegram helpers ==================
async def safe_send(user_id: int, text: str, **kwargs):
    try:
        return await bot.send_message(chat_id=user_id, text=text, **kwargs)
    except TelegramForbiddenError:
        # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ ‚Äî –∑–∞–Ω–µ—Å–µ–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é –æ–¥–∏–Ω —Ä–∞–∑
        add_blocked_user(user_id)
        print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ (–¥–æ–¥–∞–Ω–æ –¥–æ '–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏').")
    except TelegramBadRequest as e:
        print(f"‚ùå BadRequest {user_id}: {e}")
    except Exception as e:
        print(f"‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ {user_id}: {e}")
    return None

# ================== –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ==================
async def check_and_notify():
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏, –∂–æ–¥–Ω–∏—Ö –ª–∏—à–Ω—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫
    reqs = SHEETS.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–ó–∞–ø–∏—Ç–∏!A2:G1000"
    ).execute().get("values", [])

    # ‚ö†Ô∏è film_names –±—É–≤ –∑–∞–π–≤–∏–º —ñ —Å–ø–æ–∂–∏–≤–∞–≤ –ø–∞–º º—è—Ç—å ‚Äî –ø—Ä–∏–±—Ä–∞–≤

    for i, row in enumerate(reqs):
        if len(row) < 2:
            continue

        user_id_raw = row[0]
        film_name = row[1]
        status = row[2].strip().lower() if len(row) > 2 and row[2] else ""
        help_text = row[6].strip() if len(row) > 6 and row[6] else ""
        if status != "—á–µ–∫–∞—î":
            continue

        try:
            user_id = int(user_id_raw)
        except:
            continue

        if is_user_blocked(user_id):
            # –Ω–µ —à–ª–µ–º–æ, –Ω–µ –±—É–¥—É—î–º–æ –∑–∞–π–≤–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
            continue

        row_number = i + 2

        text_parts = [
            f"üé¨ <b>{film_name}</b> —É–∂–µ –¥–æ–¥–∞–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä —É –±–æ—Ç—ñ üòâ",
        ]
        if help_text:
            text_parts.append(help_text)
        text_parts += [
            "",
            "<i>–ê–¥–º—ñ–Ω–∫–∞ —Å—Ç–∞—Ä–∞–ª–∞—Å—å –¥–ª—è –≤–∞—Å üé¨‚ú®</i>",
            "<i>–•–æ—á–µ—à –ø–æ–¥—è–∫—É–≤–∞—Ç–∏ ‚Äî –ø—Ä–∏–≥–æ—Å—Ç–∏ –∫–∞–≤–æ—é ‚òïüòâ</i>",
        ]
        text = "\n".join(text_parts)

        sent = await safe_send(
            user_id,
            text,
            parse_mode="HTML",
            reply_markup=DONATE_KB,
            disable_web_page_preview=True
        )
        if not sent:
            continue

        # —è–∫—â–æ –¥—ñ–π—à–ª–æ ‚Äî –∑–Ω—è—Ç–∏ –∑ ¬´–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏¬ª, —è–∫—â–æ —Ä–∞–Ω—ñ—à–µ —Ç—É–¥–∏ –ø–æ—Ç—Ä–∞–ø–ª—è–≤
        if is_user_blocked(user_id):
            remove_user_from_blocklist(user_id)

        delete_at = datetime.utcnow() + timedelta(hours=24)

        # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å update-–∑–∞–ø–∏—Ç—ñ–≤
        SHEETS.values().batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={
                "valueInputOption": "RAW",
                "data": [
                    {"range": f"–ó–∞–ø–∏—Ç–∏!D{row_number}", "values": [[delete_at.isoformat()]]},
                    {"range": f"–ó–∞–ø–∏—Ç–∏!E{row_number}", "values": [[str(sent.message_id)]]},
                    {"range": f"–ó–∞–ø–∏—Ç–∏!C{row_number}", "values": [[f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {datetime.now().strftime('%d.%m %H:%M')}"]]},
                ]
            }
        ).execute()

        print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {film_name} ‚Üí {user_id}")

async def background_deleter():
    print("üöÄ –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ!")
    while True:
        now = datetime.utcnow()
        reqs = SHEETS.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="–ó–∞–ø–∏—Ç–∏!A2:E1000"
        ).execute().get("values", [])

        for i, row in enumerate(reqs):
            if len(row) < 5:
                continue
            user_id_raw, _, _, delete_at_str, message_id_str = row[:5]

            if not delete_at_str:
                continue
            try:
                user_id = int(user_id_raw)
                message_id = int(message_id_str)
                delete_at = datetime.fromisoformat(delete_at_str)
            except Exception:
                continue

            if now >= delete_at:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=message_id)
                    print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} —É {user_id}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {message_id} –¥–ª—è {user_id}: {e}")

                row_number = i + 2
                SHEETS.values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f"–ó–∞–ø–∏—Ç–∏!D{row_number}:E{row_number}",
                    valueInputOption="RAW",
                    body={"values": [["", ""]]}
                ).execute()

        await asyncio.sleep(60)

# ================== –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ==================
async def main():
    # –æ–¥–∏–Ω background task
    deleter_task = asyncio.create_task(background_deleter())
    try:
        while True:
            try:
                await check_and_notify()
            except Exception as e:
                print(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
            await asyncio.sleep(300)
    finally:
        # –∞–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ HTTP-—Å–µ—Å—ñ—é –±–æ—Ç–∞
        await bot.session.close()
        deleter_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await deleter_task

if __name__ == "__main__":
    import contextlib
    asyncio.run(main())
