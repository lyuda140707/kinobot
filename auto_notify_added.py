import asyncio
import os
from aiogram import Bot
from google_api import get_google_service
from dotenv import load_dotenv
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import WebAppInfo




load_dotenv()
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

def is_user_blocked(user_id: int, service, spreadsheet_id: str) -> bool:
    sheet = service.spreadsheets()
    response = sheet.values().get(
        spreadsheetId=spreadsheet_id,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2:A1000"
    ).execute()
    blocked_ids = [str(row[0]) for row in response.get("values", []) if row]
    return str(user_id) in blocked_ids

def add_blocked_user(user_id: int, service, spreadsheet_id: str):
    sheet = service.spreadsheets()
    sheet.values().append(
        spreadsheetId=spreadsheet_id,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2",
        valueInputOption="USER_ENTERED",
        insertDataOption="INSERT_ROWS",
        body={"values": [[str(user_id)]]}
    ).execute()

def remove_user_from_blocklist(user_id: int, service, spreadsheet_id: str):
    sheet = service.spreadsheets()
    response = sheet.values().get(
        spreadsheetId=spreadsheet_id,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2:A1000"
    ).execute()

    values = response.get("values", [])
    new_values = []

    for row in values:
        if row and str(row[0]) != str(user_id):
            new_values.append(row)

    # –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —Å–ø–∏—Å–æ–∫, –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ user_id
    sheet.values().update(
        spreadsheetId=spreadsheet_id,
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2:A1000",
        valueInputOption="RAW",
        body={"values": new_values}
    ).execute()


async def safe_send(bot: Bot, user_id: int, text: str, service=None, spreadsheet_id=None, **kwargs):
    try:
        sent_msg = await bot.send_message(chat_id=user_id, text=text, **kwargs)
        return sent_msg
    except TelegramForbiddenError:
        print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
        if service and spreadsheet_id:
            print(f"‚ö†Ô∏è –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É —Ç–∞–±–ª–∏—Ü—é –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏")
            add_blocked_user(user_id, service, spreadsheet_id)
    except TelegramBadRequest as e:
        print(f"‚ùå BadRequest {user_id}: {e}")
    except Exception as e:
        print(f"‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ {user_id}: {e}")
    return False


BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SHEET_ID")
bot = Bot(token=BOT_TOKEN)


async def check_and_notify():
    service = get_google_service()
    sheet = service.spreadsheets()

    reqs = sheet.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–ó–∞–ø–∏—Ç–∏!A2:G1000"
    ).execute().get("values", [])

    films = sheet.values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="Sheet1!A2:A"
    ).execute().get("values", [])
    film_names = [f[0].strip().lower() for f in films if f]

    for i, row in enumerate(reqs):
        if len(row) < 2:
            continue

        user_id = row[0]
        film_name = row[1]
        status = row[2] if len(row) > 2 else ""
        help_text = row[6] if len(row) > 6 else ""
        print(f"‚ÑπÔ∏è user_id: {user_id}, help_text: '{help_text}'")
         

        if status.strip().lower() != "—á–µ–∫–∞—î":
            continue
        if is_user_blocked(user_id, service, SPREADSHEET_ID):
            print(f"‚õî –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {user_id} ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
            continue

        
            


        row_number = i + 2

        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚òï –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ RelaxTime", url="https://send.monobank.ua/jar/2FdmSYjoGo")],
                [InlineKeyboardButton(text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è", switch_inline_query="–î–∏–≤–∏—Å—å —Ñ—ñ–ª—å–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é ‚Äî @Relax_TimeBot")],
              
            ])
            
            text = (
                f"üé¨ <b>{film_name}</b> —É–∂–µ –¥–æ–¥–∞–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä —É –±–æ—Ç—ñ üòâ\n\n"
            )
            if help_text.strip():
                text += f"{help_text.strip()}\n\n"

            text += (
                "<i>–ü—ñ–¥—Ç—Ä–∏–º–∞–π RelaxTime –Ω–∞ –∫–∞–≤—É ‚Äî –∞–¥–º—ñ–Ω—Ü—ñ –±—É–¥–µ –¥—É–∂–µ –ø—Ä–∏—î–º–Ω–æ ü´∂üèª</i>\n"
                "<i>–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ —Å–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥—Ä—É–≥—É üß°</i>\n\n"
            )

            sent_msg = await safe_send(
                bot,
                int(user_id),
                text,
                service=service,  # ‚Üê –î–û–î–ê–ô –¶–ï
                spreadsheet_id=SPREADSHEET_ID,  # ‚Üê –Ü –¶–ï
                parse_mode="HTML",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
                

            if not sent_msg:
                continue
                
            if is_user_blocked(user_id, service, SPREADSHEET_ID):
                print(f"üîì {user_id} —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Ç–∞–±–ª–∏—Ü—ñ –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏")
                remove_user_from_blocklist(user_id, service, SPREADSHEET_ID)

           

            delete_at = datetime.utcnow() + timedelta(hours=24)

            # –ó–±–µ—Ä–µ–≥—Ç–∏ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            sheet.values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"–ó–∞–ø–∏—Ç–∏!D{row_number}",
                valueInputOption="RAW",
                body={"values": [[delete_at.isoformat()]]}
            ).execute()

            # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id
            sheet.values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"–ó–∞–ø–∏—Ç–∏!E{row_number}",
                valueInputOption="RAW",
                body={"values": [[str(sent_msg.message_id)]]}
            ).execute()

            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
            sheet.values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"–ó–∞–ø–∏—Ç–∏!C{row_number}",
                valueInputOption="RAW",
                body={"values": [[f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {datetime.now().strftime('%d.%m %H:%M')}"]]}
            ).execute()

            print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {film_name} ‚Üí {user_id}")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {user_id}: {e}")


async def background_deleter():
    service = get_google_service()
    sheet = service.spreadsheets()
    print("üöÄ –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ!")

    while True:
        now = datetime.utcnow()
        print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å {now.isoformat()}")

        reqs = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="–ó–∞–ø–∏—Ç–∏!A2:E1000"
        ).execute().get("values", [])

        for i, row in enumerate(reqs):
            if len(row) < 5:
                continue

            user_id = row[0]
            film_name = row[1]
            delete_at_str = row[3]
            message_id_str = row[4]

            if not delete_at_str.strip():
                continue

            try:
                delete_at = datetime.fromisoformat(delete_at_str)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ —É —Ä—è–¥–∫—É {i + 2}: {delete_at_str} ‚Äî {e}")
                continue

            if now >= delete_at:
                try:
                    await bot.delete_message(chat_id=int(user_id), message_id=int(message_id_str))
                    print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id_str} —É {user_id}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id_str} –¥–ª—è {user_id}: {e}")

                row_number = i + 2
                sheet.values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f"–ó–∞–ø–∏—Ç–∏!D{row_number}:E{row_number}",
                    valueInputOption="RAW",
                    body={"values": [["", ""]]}
                ).execute()

        await asyncio.sleep(60)


if __name__ == "__main__":
    async def main_loop():
        asyncio.create_task(background_deleter())
        while True:
            try:
                await check_and_notify()
                print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß–µ–∫–∞—é 5 —Ö–≤–∏–ª–∏–Ω...")
            except Exception as e:
                print(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
            await asyncio.sleep(300)

    asyncio.run(main_loop())
