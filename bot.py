from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from google_api import get_gsheet_data
import os
from dotenv import load_dotenv
load_dotenv()
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram import F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import logging

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher(storage=MemoryStorage())

webapp_keyboard = InlineKeyboardMarkup(inline_keyboard=[  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è WebApp
    [InlineKeyboardButton(
        text="üé¨ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫—ñ–Ω–æ-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫",
        web_app=WebAppInfo(url="https://lyuda140707.github.io/kinobot-webapp/")
    )]
])

back_to_menu_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∫–∞—Ç–∞–ª–æ–≥
        [
            InlineKeyboardButton(
                text="üé• –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ—ñ–ª—å–º—ñ–≤",
                web_app=WebAppInfo(url="https://lyuda140707.github.io/kinobot-webapp/")
            )
        ]
    ]
)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫—ñ–Ω–æ-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫:", reply_markup=webapp_keyboard)

@dp.message(Command("webapp"))
async def send_webapp(message: types.Message):
    await message.answer("–û—Å—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è WebApp:", reply_markup=webapp_keyboard)

@dp.message()
async def handle_video_request(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ç–µ–∫—Å—Ç –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    if message.text:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ URL (user_id —ñ file_id)
        try:
            command, user_id, file_id = message.text.split("_")
            
            # –Ø–∫—â–æ –≤—Å–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ—ñ–ª—å–º
            if user_id and file_id:
                await bot.send_video(
                    chat_id=user_id,
                    video=file_id,
                    caption="üé¨ –û—Å—å –≤–∞—à —Ñ—ñ–ª—å–º! –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–≥–ª—è–¥–æ–º! üçø"
                )
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç—É: {e}")
            await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    # –Ø–∫—â–æ —Ü–µ –≤—ñ–¥–µ–æ, –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ –æ–∫—Ä–µ–º–æ
    elif message.video:
        file_id = message.video.file_id
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ –∑ file_id: {file_id}")
        await message.answer(f"üé• –í–∞—à–µ –≤—ñ–¥–µ–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, file_id: {file_id}")

@dp.message(F.video)
async def get_file_id(message: types.Message):
    file_id = message.video.file_id
    await message.answer(f"üé• file_id:\n<code>{file_id}</code>", parse_mode="HTML")



