from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from google_api import get_gsheet_data
import os
from dotenv import load_dotenv
load_dotenv()
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram import F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import logging
logging.basicConfig(level=logging.INFO)
from google_api import get_google_service
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from datetime import datetime, timedelta
from aiogram import types
from google_api import add_user_if_not_exists
MEDIA_CHANNEL_ID = int(os.getenv("MEDIA_CHANNEL_ID"))


def clean_expired_pro():
    service = get_google_service()
    sheet = service.spreadsheets()

    req = sheet.values().get(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="PRO!A2:D1000"
    ).execute()
    rows = req.get("values", [])
    cleared = 0

    for i, row in enumerate(rows):
        if len(row) < 4:
            continue
        expire_date = row[3]
        try:
            expire_dt = datetime.strptime(expire_date, "%Y-%m-%d")
        except Exception:
            continue
        if expire_dt.date() < datetime.now().date():
            row_number = i + 2
            sheet.values().update(
                spreadsheetId=os.getenv("SHEET_ID"),
                range=f"PRO!C{row_number}",
                valueInputOption="RAW",
                body={"values":[["–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"]]}
            ).execute()
            cleared += 1
    print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleared} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")



def add_blocked_user(user_id: int):
    service = get_google_service()
    sheet = service.spreadsheets()
    sheet.values().append(
        spreadsheetId=os.getenv("SHEET_ID"),
        range="–ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏!A2",
        valueInputOption="USER_ENTERED",
        insertDataOption="INSERT_ROWS",
        body={"values": [[str(user_id)]]}
    ).execute()
    print(f"üõë –î–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏: {user_id}")

async def safe_send(bot: Bot, user_id: int, text: str, **kwargs):
    try:
        await bot.send_message(chat_id=user_id, text=text, **kwargs)
        return True
    except TelegramForbiddenError:
        print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
        add_blocked_user(user_id)
    except TelegramBadRequest as e:
        print(f"‚ùå BadRequest {user_id}: {e}")
    except Exception as e:
        print(f"‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ {user_id}: {e}")
    return False
    

bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher(storage=MemoryStorage())

webapp_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(
        text="üõã –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫",
        web_app=WebAppInfo(url="https://relaxbox.site/")
    )]
])


async def safe_send_admin(bot, admin_id, text, **kwargs):
    try:
        await bot.send_message(admin_id, text, **kwargs)
        return True
    except Exception as e:
        print(f"‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
        return False




@dp.message(Command("webapp"))
async def send_webapp(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üòé –í—ñ–¥–∫—Ä–∏—Ç–∏ WebApp",
            web_app=WebAppInfo(url="https://relaxbox.site/")
        )]
    ])
    await message.answer("–û—Å—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è WebApp:", reply_markup=keyboard)


@dp.message(Command("ok"))
async def approve_pro(message: types.Message):
    print("‚úÖ –°—Ç–∞—Ä—Ç—É–≤–∞–≤ approve_pro")
    print(f"From user id: {message.from_user.id}, text: {message.text}")

    if message.from_user.id not in [8265377605, 7963871119]:
        print("‚õî –ù–µ —Ç–≤—ñ–π –∞–¥–º—ñ–Ω—Å—å–∫–∏–π ID, –≤–∏—Ö—ñ–¥.")
        return

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        print("‚õî –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏")
        await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: <code>/ok user_id</code>", parse_mode="HTML")
        return

    user_id = args[1].strip()
    print(f"üîé –®—É–∫–∞—î–º–æ user_id = {user_id}")

    service = get_google_service()
    sheet = service.spreadsheets()
    spreadsheet_id = os.getenv("SHEET_ID")
    expire_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")

    try:
        res = sheet.values().get(
            spreadsheetId=spreadsheet_id,
            range="PRO!A2:D1000"
        ).execute()
        rows = res.get("values", [])
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤ —É PRO")
    except Exception as e:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –∑ Google Sheets:", e)
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        return

    matched_rows = [(i + 2, row) for i, row in enumerate(rows) if len(row) >= 1 and row[0] == user_id]
    print(f"matched_rows: {matched_rows}")

    if matched_rows:
        for idx, (row_number, row) in enumerate(matched_rows):
            print(f"‚û°Ô∏è –û–Ω–æ–≤–ª—é—î–º–æ —Ä—è–¥–æ–∫ {row_number} (idx={idx})")
            if idx == 0:
                username = row[1] if len(row) > 1 else ""
                try:
                    sheet.values().update(
                        spreadsheetId=spreadsheet_id,
                        range=f"PRO!A{row_number}:D{row_number}",
                        valueInputOption="USER_ENTERED",
                        body={"values": [[user_id, username, "–ê–∫—Ç–∏–≤–Ω–æ", expire_date]]}
                    ).execute()
                    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ ({row_number})")
                except Exception as e:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫:", e)
            else:
                try:
                    sheet.values().update(
                        spreadsheetId=spreadsheet_id,
                        range=f"PRO!A{row_number}:D{row_number}",
                        valueInputOption="RAW",
                        body={"values": [["", "", "", ""]]}
                    ).execute()
                    print(f"üóëÔ∏è –î—É–±–ª—å —Ä—è–¥–æ–∫ –æ—á–∏—â–µ–Ω–æ ({row_number})")
                except Exception as e:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –¥—É–±–ª—å:", e)
    else:
        print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ user_id, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π")
        try:
            sheet.values().append(
                spreadsheetId=spreadsheet_id,
                range="PRO!A2:D2",
                valueInputOption="USER_ENTERED",
                body={"values": [[user_id, "", "–ê–∫—Ç–∏–≤–Ω–æ", expire_date]]}
            ).execute()
            print("‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫")
        except Exception as e:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫:", e)

    await message.reply(f"‚úÖ PRO –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è {user_id} –¥–æ {expire_date}")

    try:
        await bot.send_message(
            chat_id=int(user_id),
            text=f"üéâ –í–∞—à PRO –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {expire_date}! –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É üíõ"
        )
        print(f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

from google_api import find_film_by_name

from aiogram.filters import Command

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    # 1) –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    add_user_if_not_exists(
        user_id=message.from_user.id,
        username=message.from_user.username or "",
        first_name=message.from_user.first_name or ""
    )

    # 2) –î—ñ—Å—Ç–∞—î–º–æ payload –ø—ñ—Å–ª—è /start
    payload = None
    if message.text and len(message.text.split()) > 1:
        payload = message.text.split(maxsplit=1)[1].strip()

    # 3) –Ø–∫—â–æ payload –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –ù–ï —Ç–æ–π —Ñ–æ—Ä–º–∞—Ç, —â–æ –º–∏ –æ—á—ñ–∫—É—î–º–æ ‚Äî
    #    –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", –∞ –¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É WebApp.
    if payload and payload.startswith("ref_"):
        referrer_id = payload.replace("ref_", "").strip()
        if referrer_id != str(message.from_user.id):  # —â–æ–± –Ω–µ –∑–∞–ø—Ä–æ—à—É–≤–∞–≤ —Å–∞–º —Å–µ–±–µ
            import requests
            try:
                backend_url = os.getenv("WEBHOOK_URL_BACKEND") or os.getenv("WEBAPP_BACKEND_URL")
                if backend_url:
                    try:
                        requests.post(
                            backend_url.rstrip("/") + "/referral-join",
                            json={
                                "referrer_id": referrer_id,
                                "new_user_id": str(message.from_user.id)
                            },
                            timeout=10
                        )
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É referral-join: {e}")
            await safe_send(
                bot,
                message.chat.id,
                "üéâ –î—è–∫—É—é, —â–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è! –¢–≤—ñ–π –¥—Ä—É–≥ –æ—Ç—Ä–∏–º–∞—î –±–æ–Ω—É—Å –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è üíõ",
                reply_markup=webapp_keyboard
            )
        return
    # 4) –Ø–∫—â–æ payload –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç ‚Üí –¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É WebApp
    if not payload or not (payload.startswith("film_") or payload.startswith("series_")):
        await safe_send(
            bot,
            message.chat.id,
            "‚òï –•–æ—á–µ—à —Ç—Ä–æ—Ö–∏ –≤—ñ–¥–ø–æ—á–∏—Ç–∏? –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É ‚Äî —É—Å–µ –≤–∂–µ –≥–æ—Ç–æ–≤–æ!",
            reply_markup=webapp_keyboard
        )
        return

    # 4) –Ø–∫—â–æ payload –≤–∞–ª—ñ–¥–Ω–∏–π ‚Äî –¥—ñ—Å—Ç–∞—î–º–æ id —ñ —à–ª–µ–º–æ –≤—ñ–¥–µ–æ –∑ –∫–∞–Ω–∞–ª—É
    film_id = payload.split("_", 1)[1]  # –≤—Å–µ, —â–æ –ø—ñ—Å–ª—è 'film_' –∞–±–æ 'series_'
    # —à—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ, –¥–µ message_id == film_id (–∞–±–æ file_id —è–∫ fallback)
    films = get_gsheet_data()
    found = next(
        (f for f in films
         if str(f.get("message_id", "")).strip() == film_id
         or str(f.get("file_id", "")).strip() == film_id),
        None
    )

    if not found:
        # –Ω–∞–≤—ñ—Ç—å —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É ‚Äî –∫—Ä–∞—â–µ –Ω–µ –ª—è–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–º–∏–ª–∫–æ—é
        await safe_send(
            bot,
            message.chat.id,
            "üé¨ –í—ñ–¥–∫—Ä–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —ñ –æ–±–µ—Ä–∏ —Ñ—ñ–ª—å–º üëá",
            reply_markup=webapp_keyboard
        )
        return

    name = found.get("–ù–∞–∑–≤–∞", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    desc = found.get("–û–ø–∏—Å", "–ë–µ–∑ –æ–ø–∏—Å—É")
    original_message_id = found.get("message_id") or found.get("file_id")

    caption = f"*üé¨ {name}*\n{desc}"

    try:
        await bot.copy_message(
            chat_id=message.chat.id,
            from_chat_id=MEDIA_CHANNEL_ID,
            message_id=int(original_message_id),
            caption=caption,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: {e}")
        await safe_send(bot, message.chat.id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ")



@dp.message(F.video)
async def get_file_id(message: types.Message):
    file_id = message.video.file_id
    await message.answer(f"üé• file_id:\n<code>{file_id}</code>", parse_mode="HTML")






@dp.message(F.text)
async def process_message(message: types.Message):
    add_user_if_not_exists(
        user_id=message.from_user.id,
        username=message.from_user.username or "",
        first_name=message.from_user.first_name or ""
    )
    
    # --- /reply (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—É)
    if message.text and message.text.startswith('/reply '):
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /reply user_id –≤—ñ–¥–ø–æ–≤—ñ–¥—å", parse_mode=None)
            return
        user_id = parts[1]
        reply_text = parts[2]
        try:
            await bot.send_message(user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}", parse_mode=None)
            await message.reply("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        except Exception as e:
            await message.reply(f"‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {e}")
        return  # –©–æ–± –Ω–µ —à—É–∫–∞—Ç–∏ –¥–∞–ª—ñ —è–∫ —Ñ—ñ–ª—å–º

    # --- –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É
    if not message.text:
        return

    if not message.chat or not message.chat.id:
        print("‚ùå –ù–µ–º–∞—î message.chat.id ‚Äî –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ")
        return

    query = message.text.strip()  # –ú–æ–∂–Ω–∞ .lower() ‚Äî –∞–ª–µ find_film_by_name –≤–∂–µ —Ü–µ —Ä–æ–±–∏—Ç—å

    film = find_film_by_name(query)

    if film:
        name = film.get("–ù–∞–∑–≤–∞", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        desc = film.get("–û–ø–∏—Å", "–ë–µ–∑ –æ–ø–∏—Å—É")
        message_id = film.get("message_id")

        caption = f"*üé¨ {name}*\n{desc}"
        print(f"‚úÖ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ—ñ–ª—å–º: {name}")
        print(f"üÜî message_id: {message_id}")

        if message_id:
            try:
                await bot.copy_message(
                    chat_id=message.chat.id,
                    from_chat_id=MEDIA_CHANNEL_ID,
                    message_id=int(message_id),
                    caption=caption,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: {e}")
                await safe_send(bot, message.chat.id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ")


        else:
            await message.answer(caption, parse_mode="Markdown")
        return

    await safe_send(bot, message.chat.id, "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢")
    
